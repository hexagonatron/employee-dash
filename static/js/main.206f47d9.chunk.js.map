{"version":3,"sources":["components/elements/Toggle.js","components/Header.js","components/DirectoryControls.js","components/TableRow.js","components/EmployeeTable.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","label","change","className","type","id","value","onChange","htmlFor","Header","darkModeToggle","DirectoryControls","updateFilter","placeholder","e","name","target","TableRow","employee","src","picture","thumbnail","alt","first","last","dob","age","location","country","nat","EmployeeTable","employees","map","i","key","Directory","useState","setEmployees","field","order","sortObj","filterObj","filteredEmployees","updateFilteredEmployees","useEffect","fetch","then","res","json","console","log","results","newEmployees","length","filter","toLowerCase","includes","App","darkMode","setDarkmode","checked","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.206f47d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Toggle({label, change}) {\r\n    return (\r\n        <div className=\"custom-switch\">\r\n            <input type=\"checkbox\" id=\"switch\" value=\"\" onChange={change}/>\r\n            <label htmlFor=\"switch\">{label}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Toggle;","import React from 'react';\r\n\r\nimport Toggle from './elements/Toggle';\r\n\r\nfunction Header({darkModeToggle}) {\r\n\r\n    \r\n\r\n    return (\r\n        <nav className=\"navbar justify-content-between\">\r\n            <div className=\"navbar-content\">\r\n                \r\n                <h1><i className=\"fas fa-address-book\"></i> Employee Directory</h1>\r\n            </div>\r\n            <div className=\"navbar-content\">\r\n                <Toggle label={<i className=\"fas fa-moon\"></i>} change={darkModeToggle}/>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst DirectoryControls = ({updateFilter}) => {\r\n\r\n    const filterChangeHandler = (e) => {\r\n        updateFilter({name: e.target.value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search by name\" onChange={filterChangeHandler}></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DirectoryControls;","import React from 'react';\r\n\r\nconst TableRow = ({ employee }) => {\r\n\r\n    return (\r\n        <tr>\r\n            <th><img src={employee.picture.thumbnail} alt={`Picture of ${employee.name.first}`} /></th>\r\n            <td>{employee.name.first} {employee.name.last}</td>\r\n            <td>{employee.dob.age}</td>\r\n            <td className=\"text-right\">{employee.location.country} <img src={`https://www.countryflags.io/${employee.nat}/flat/16.png`}></img></td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default TableRow;","import React from 'react';\r\n\r\nimport TableRow from './TableRow'\r\n\r\nfunction EmployeeTable({employees}){\r\n    return (\r\n        <table className=\"table table-striped\">\r\n  <thead>\r\n    <tr>\r\n      <th>Avatar</th>\r\n      <th>Name</th>\r\n      <th>Age</th>\r\n      <th className=\"text-right\">Country</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n        {employees.map((employee, i) => <TableRow employee={employee} key={i}/>)}\r\n  </tbody>\r\n</table>\r\n    );\r\n}\r\n\r\nexport default EmployeeTable;","import React, { useState, useEffect } from 'react';\r\nimport fetch from 'node-fetch';\r\n\r\nimport DirectoryControls from './DirectoryControls'\r\nimport EmployeeTable from './EmployeeTable'\r\n\r\nconst Directory = () => {\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [sortObj, updateSort] = useState({field: \"name\", order: \"dsc\"});\r\n    const [filterObj, updateFilter] = useState({name:\"\"});\r\n    const [filteredEmployees, updateFilteredEmployees] = useState([]);\r\n\r\n    //Get some random employees on page load\r\n    useEffect(() => {\r\n        fetch('https://randomuser.me/api?results=50').then(res => res.json()).then(json => {\r\n            console.log(json)\r\n            setEmployees(json.results);\r\n        })\r\n    }, []);\r\n\r\n    //Update filtered employees whenever something changes\r\n    useEffect(() => {\r\n        console.log(filterObj);\r\n        \r\n        let newEmployees = employees\r\n\r\n        if(newEmployees.length && filterObj.name){\r\n            newEmployees = newEmployees.filter(employee => {\r\n                return (employee.name.first.toLowerCase().includes(filterObj.name.toLowerCase()));\r\n            })\r\n        }\r\n\r\n        if(newEmployees.length && sortObj){\r\n            newEmployees = newEmployees.filter(employee => {\r\n                return (employee.name.first.toLowerCase().includes(filterObj.name.toLowerCase()));\r\n            })\r\n        }\r\n\r\n        updateFilteredEmployees(newEmployees);\r\n    }, [employees, sortObj, filterObj])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <DirectoryControls updateFilter={updateFilter}/>\r\n            <EmployeeTable employees={filteredEmployees} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Directory;","import React,{useState} from 'react';\nimport './assets/css/App.css';\n\nimport Header from './components/Header'\nimport Directory from './components/Directory'\n\nfunction App() {\n\n    const [darkMode, setDarkmode] = useState(false);\n\n    const darkModeToggle = (e) => {\n        console.log(e.target.checked)\n        setDarkmode(e.target.checked)\n    }\n\n\n    return (\n        <div className={`page-wrapper ${darkMode?\"dark-mode\":\"\"}`}>\n            <div className=\"content-wrapper\">\n            <Header darkModeToggle={darkModeToggle}/>\n            <Directory/>\n\n            </div>\n        </div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}